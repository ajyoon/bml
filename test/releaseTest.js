// Pre-release smoke test run against build artifacts in bml/dist

const { execSync } = require('child_process');
const path = require('path');
const assert = require('assert');
const fs = require('fs');
const expect = require('expect');

const bmlScriptPath = path.resolve(__dirname, 'lao_tzu_36.bml');
const expectedOutputPath = path.resolve(
  __dirname, 'lao_tzu_36_expected_output_seed_1234.bml');
const distDir = path.resolve(__dirname, '../dist');
const cliPath = path.resolve(distDir, 'cli.js');
const webBundlePath = path.resolve(distDir, 'bml.bundle.js');
const libraryPath = path.resolve(distDir, 'index.js');


if (!(fs.existsSync(cliPath)
  && fs.existsSync(webBundlePath)
  && fs.existsSync(libraryPath))) {
  console.error(
    'Dist artifacts not found. This release test '
    + 'runs against build artifacts generated by `npm run build`.');
  process.exit(1);
}

const bmlScript = fs.readFileSync(bmlScriptPath).toString();
const seed = 1234;
const expectedOutput = fs.readFileSync(expectedOutputPath).toString();

function assertResult(result) {
  if (result !== expectedOutput) {
    console.error(
      'Rendered output did not match expected. Expected:\n\n\n', expectedOutput,
      '\n\n\n---------------------------\n\n\n', 'Got:\n', result);
    throw new Error();
  }
}

console.log('Checking CLI');
let cliResult = execSync(`node ${cliPath} ${bmlScriptPath} --seed ${seed}`).toString();
assertResult(cliResult);

console.log('Checking node library');
const bmlLib = require(libraryPath);
let libResult = bmlLib(bmlScript, { randomSeed: seed });
assertResult(libResult);

console.log('All smoke tests passed');

eval {
    provide({
        someFunc: (match, string, matchIndex) => {
            return 'some replacement string';
        },
        replaceWithRandomNumber: (match, string, matchIndex) => {
            return '' + bml.randomFloat(0, 1000);
        }
    });
}

mode main {
    (testslug) as { call replaceWithRandomNumber 30, (b) 20 }
    (recurse!) as { (just kidding), (outer {(inner 1), (inner 2)}) }
}

mode literal {
     // no rules!
}
{use main}

# test

[[some text for invoking the 'testslug' rule]]

testslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslugtestslug

a simple {(choice), (inline choose block)}

{
    (a nonrecursive branch),
    (a recursive {
        (path),
        (branch)
    })
}

recurse!

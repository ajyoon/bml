evaluate {
    // arbitrary javascript
    // global bml interpreter settings
    settings = {
        renderMarkdown: true,
    };
    function someFunc(trigger, string, sourceIndex) {
        return 'some replacement string';
    }
    // Copy the prelude into literal text.
    function copyPrelude(trigger, string, sourceIndex) {
        return '```\n' + string.slice(0, sourceIndex) + '```\n';
    }
}
mode initial {
    'not' as '' 30, 'still' 50, call someFunc
    '.' as '?' 10
}
mode literal {
    // No rules
}
begin using initial

{{call copyPrelude}}

not
not
not
not
not

BML is a superset of natural language which applies stochastic transformations
on text. Words and strings can be used as triggers for weighted random
replacements and arbitrary transformations specified with javascript.

A prelude section is used to define maps and evaluate arbitrary
javascript. An evaluate block provides a location to execute arbitrary code
and define reusable functions. maps link words in the text to other words
with weights controlling their relative likelihood and may also call functions
either defined inline or in the evaluate block.

Strings can be escaped with \<<double angle bracket delimiters.>> and backslashes \\.

The text body can also apply one-time transformations, the common marker
for them being {curly braces}.

Available one-time transformations include:

* choose: {{'x' 20, 'y' 30, 'z' 50, call someFunc}}
* using: {{using literal}}
